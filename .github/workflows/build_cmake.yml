name: CMake Build Matrix

on:
  push:
  pull_request:
  release:
    branches:
      - main

env:
  CMAKE_VERSION: 3.16.3

jobs:
  build-ubuntu:
    name: ${{ matrix.os }} ${{ matrix.build_type }} ${{ matrix.cxx }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug, Release]
        cxx: [g++, g++-10, clang++-10]
    steps:
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: sudo apt-get install ${{ matrix.cxx }} ninja-build lcov
      - name: Check Coverage
        run: |
          if [[ ${{ matrix.build_type }} == 'Debug' && ${{ matrix.cxx }} == 'g++' ]]; then
            echo "COVERAGE=ON" >> "$GITHUB_ENV"
            echo "Running with coverage"
          else
            echo "COVERAGE=OFF" >> "$GITHUB_ENV"
          fi
      - name: Configure
        env:
          CXX: ${{ matrix.cxx }}
        run: mkdir build && cd build && cmake -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCOVERAGE=${{ env.COVERAGE }} ..
      - name: Build
        run: cmake --build build
      - name: Test
        run: cd build && ctest --output-on-failure
      - name: Coverage
        if: ${{ env.COVERAGE == 'ON' }}
        run: |
          files=`find . -name "*.gcda" | xargs`
          gcov -f -b $files
      - name: lcov-action
        if: ${{ env.COVERAGE == 'ON' }}
        uses: imciner2/run-lcov@v1
        with:
          input_directory: "."
          exclude: '"*test/*" "*_deps/*" "*/usr/include/*"'
          output_file: "./coverage.info"
      - name: generate coverage report
        if: ${{ env.COVERAGE == 'ON' }}
        run: |
          cat coverage.info | c++filt >coverage_filtered.info
          genhtml coverage_filtered.info --output-directory html
      - name: Archive code coverage results
        if: ${{ env.COVERAGE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: html
      - name: Create distribution zip
        if: ${{ env.COVERAGE == 'ON' }}
        run: cd build && cpack --config CPackConfig.cmake
      - name: Archive rexsapi package
        if: ${{ env.COVERAGE == 'ON' }}
        uses: actions/upload-artifact@v2
        with:
          name: rexsapi-package
          path: build/rexsapi-*.zip

  build-windows:
    name: ${{ matrix.os }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v1
      - name: configure
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
      - name: build
        run: cmake --build build --config ${{ matrix.build_type }}
      - name: test
        run: cd build && ctest --output-on-failure -C ${{ matrix.build_type }}
